/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.36).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.eliascanalesnieto.carental.controller;

import com.eliascanalesnieto.carental.dto.Rental;
import com.eliascanalesnieto.carental.dto.RentalResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import java.util.List;

@Validated
public interface RentalApi {

    @Operation(summary = "Delete rental by id", description = "", tags={ "rentals" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation"),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Rental not found") })
    @RequestMapping(value = "/rentals/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteRental(@Parameter(in = ParameterIn.PATH, description = "id of rental", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Returns Rental inventories by status", description = "Returns a map of status codes to quantities", tags={ "rentals" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Rental.class)))) })
    @RequestMapping(value = "/rentals",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    RentalResponse getRentals();

    @Operation(summary = "Simulate rentals for a car", description = "", tags={ "rentals" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Rental.class)))),

            @ApiResponse(responseCode = "405", description = "Invalid input") })
    @RequestMapping(value = "/rentals/simulate",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.POST)
    RentalResponse simulateRent(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody List<Rental> rentals);

    @Operation(summary = "Find purchase Rental by ID", description = "For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.", tags={ "rentals" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Rental.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Rental not found") })
    @RequestMapping(value = "/rentals/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    Rental getRentalById(@Parameter(in = ParameterIn.PATH, description = "id of rental", required=true, schema=@Schema()) @PathVariable("id") String id);

    @Operation(summary = "Find purchase Rental by ID", description = "For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.", tags={ "rentals" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Rental.class))),

            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),

            @ApiResponse(responseCode = "404", description = "Rental not found") })
    @RequestMapping(value = "/rentals/{id}/finish",
            produces = { "application/json" },
            method = RequestMethod.POST)
    Rental finishRent(@Parameter(in = ParameterIn.PATH, description = "id of rental", required=true, schema=@Schema()) @PathVariable("id") String id, @Valid @RequestBody String deliveredCarDate);

    @Operation(summary = "Create a rental for a car", description = "", tags={ "rentals" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Rental.class)))),
        
        @ApiResponse(responseCode = "405", description = "Invalid input") })
    @RequestMapping(value = "/rentals",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    RentalResponse rent(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody List<Rental> body);


    @Operation(summary = "Update rental by id", description = "", tags={ "rentals" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Rental.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Rental not found") })
    @RequestMapping(value = "/rentals/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Rental> updateRentalById(@Parameter(in = ParameterIn.PATH, description = "id of rental", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody Rental body);

}

